@rendermode InteractiveServer
@implements IDisposable
@inject SimulationService SimulationService
@using VSSI.Core.Models
@using VSSI.UI.Services


<h3>Signals</h3>
<table class="table table-sm table-bordered table-hover text-center">
    <thead class="table-dark">
        <tr>
            <th>Name</th>
            <th>Value</th>
            <th>Unit</th>
            <th>Status</th>
            <th>Timestamp</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var signal in Signals)
        {
            <tr class="@GetRowClass(signal.Status)">
                <td>@signal.Name</td>
                <td>@signal.Value.ToString("F1")</td>
                <td>@signal.Unit</td>
                <td>@signal.Status</td>
                <td>@signal.Timestamp.ToString("HH:mm:ss")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Signal> Signals = new();

    protected override void OnInitialized()
    {
        Signals = SimulationService.GetLatestSignals();
        SimulationService.SignalsUpdated += OnSignalsUpdated;
    }

    private void OnSignalsUpdated(List<Signal> updatedSignals)
    {
        InvokeAsync(() =>
        {
            Console.WriteLine("UI update received at " + DateTime.Now); // ← debug!
            Signals = updatedSignals;
            StateHasChanged();
            foreach (var sig in updatedSignals)
                Console.WriteLine($"{sig.Name}: {sig.Value}");
        });
    }

    public void Dispose()
    {
        SimulationService.SignalsUpdated -= OnSignalsUpdated;
    }

    private string GetRowClass(string status) => status switch
    {
        "Warning" => "table-warning",
        "Critical" => "table-danger",
        _ => ""
    };
}